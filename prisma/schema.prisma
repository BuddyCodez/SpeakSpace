// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  // provider = "sqlite"
  // url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// User-related enums and models
enum UserRole {
  MODERATOR
  EVALUATOR
  PARTICIPANT
}

enum UserType {
  HR
  STUDENT
  JOBSEEKER
  EMPLOYEE
}

enum SessionType {
  GROUP_DISCUSSION
  INTERVIEW
}

enum CommunicationMode {
  CHAT
  VOICE
  VIDEO
}

enum MessageType {
  TEXT
  MEDIA
  SYSTEM // For system messages like user joins, leaves, bans, etc.
}

enum ModerationActionType {
  BAN
  KICK
  WARNING
  MUTE
}

model User {
    id                String              @id @default(uuid())
  username          String              @unique
  email             String              @unique
  password          String              // Required for local auth
  imageUrl          String?             @map("image_url")
  userType          UserType            @default(STUDENT) @map("user_type")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  sessionMembers    SessionMember[]
  createdSessions   Session[]           @relation("SessionCreator")
  reviews           Review[]            @relation("ReviewAuthor")
  receivedReviews   Review[]            @relation("ReviewTarget")
  messages          Message[]
  moderationActions ModerationAction[]   @relation("ModeratedUser")
  actionsTaken      ModerationAction[]   @relation("ModeratorUser")
  
  @@map("users")
  @@index([email])
}

model Session {
  id                String              @id @default(uuid())
  code              String              @unique
  title             String
  description       String?
  sessionType       SessionType         @map("session_type")
  communicationModes CommunicationMode[] @map("communication_modes")
  isActive          Boolean             @default(true) @map("is_active")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  creatorId         String              @map("creator_id")
  
  // Relations
  creator           User                @relation("SessionCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  sessionMembers    SessionMember[]
  messages          Message[]
  moderationActions ModerationAction[]
  
  @@index([code])
  @@index([creatorId])
  @@map("sessions")
}

model SessionMember {
  id                String              @id @default(uuid())
  userId            String              @map("user_id")
  sessionId         String              @map("session_id")
  role              UserRole
  joinedAt          DateTime            @default(now()) @map("joined_at")
  leftAt            DateTime?           @map("left_at")
  isBanned          Boolean             @default(false) @map("is_banned")
  isMuted           Boolean             @default(false) @map("is_muted")
  
  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  session           Session             @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  moderationActions ModerationAction[]
  
  @@unique([userId, sessionId])
  @@index([userId])
  @@index([sessionId])
  @@map("session_members")
}

model Review {
  id                String              @id @default(uuid())
  authorId          String              @map("author_id")
  targetId          String              @map("target_id")
  sessionId         String              @map("session_id")
  content           String
  rating            Int                 @default(0)
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  // Relations
  author            User                @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  target            User                @relation("ReviewTarget", fields: [targetId], references: [id], onDelete: Cascade)
  
  @@unique([authorId, targetId, sessionId])
  @@index([authorId])
  @@index([targetId])
  @@index([sessionId])
  @@map("reviews")
}

model Message {
  id                String              @id @default(uuid())
  content           String?             // Optional for media-only messages
  mediaUrl          String?             @map("media_url")
  mediaType         String?             @map("media_type")
  senderId          String              @map("sender_id")
  sessionId         String              @map("session_id")
  messageType       MessageType         @default(TEXT) @map("message_type")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  isEdited          Boolean             @default(false) @map("is_edited")
  replyToId         String?             @map("reply_to_id") // For message replies
  
  // Relations
  sender            User                @relation(fields: [senderId], references: [id], onDelete: Cascade)
  session           Session             @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  replyTo           Message?            @relation("MessageReplies", fields: [replyToId], references: [id])
  replies           Message[]           @relation("MessageReplies")
  
  @@index([senderId])
  @@index([sessionId])
  @@index([createdAt])
  @@map("messages")
}

model ModerationAction {
  id                String              @id @default(uuid())
  actionType        ModerationActionType @map("action_type")
  reason            String?
  durationMinutes   Int?                @map("duration_minutes") // For temporary bans/mutes
  userId            String              @map("user_id") // The user being moderated
  moderatorId       String              @map("moderator_id") // The user who performed the action
  sessionId         String              @map("session_id")
  sessionMemberId   String              @map("session_member_id")
  createdAt         DateTime            @default(now()) @map("created_at")
  expiresAt         DateTime?           @map("expires_at") // When the action automatically expires
  
  // Relations
  user              User                @relation("ModeratedUser", fields: [userId], references: [id], onDelete: Cascade)
  moderator         User                @relation("ModeratorUser", fields: [moderatorId], references: [id], onDelete: Cascade)
  session           Session             @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionMember     SessionMember       @relation(fields: [sessionMemberId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([moderatorId])
  @@index([sessionId])
  @@index([sessionMemberId])
  @@map("moderation_actions")
}